package com.openMap1.mapper.mapping;import com.openMap1.mapper.core.ClassSet;import com.openMap1.mapper.util.messageChannel;import java.util.Vector;/** * represents one inclusion filter in an object mapping * The objects of the class must obey the inclusion filter (a condition in the class model) * if they are to be represented in the XML. *  * This is a wrapper for the model class ModelFilter * * @author Robert Worden * @version 1.0 *  */public class filter{	private messageChannel mChan;	public messageChannel mChan() {return mChan;}	    private ClassSet onCSet; // the (class,subset) of object on which this is a filter    private ClassSet depCSet; // the (class,subset) (if any) this filter depends on    /** the (class,subset) of object on which this is a filter */    public ClassSet onCSet() {return onCSet;}    /**  the (class,subset) (if any) this filter depends on */    public ClassSet depCSet() {return depCSet;}    /** set the (class,subset) (if any) this filter depends on */    public void setDepCSet(ClassSet dCSet) {depCSet = dCSet;}    public filter(messageChannel mChan, ClassSet onCS)    {        onCSet = onCS;        this.mChan = mChan;    }    /** to be overridden */    public boolean inFilters(Vector<filter> filters) {return false;}    /** to be overridden */    public void write() {mChan.message("Filter on " + onCSet.stringForm()        + " not defined.");}}